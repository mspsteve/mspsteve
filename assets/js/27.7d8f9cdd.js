(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{164:function(t,a,s){t.exports=s.p+"assets/img/jvm-9.b8af882f.png"},165:function(t,a,s){t.exports=s.p+"assets/img/jvm-9.1.f225126b.png"},166:function(t,a,s){t.exports=s.p+"assets/img/jvm-9.2.415ee8e4.png"},167:function(t,a,s){t.exports=s.p+"assets/img/jvm-9.3.4749cad2.png"},168:function(t,a,s){t.exports=s.p+"assets/img/jvm-9.4.2cc29b8d.png"},169:function(t,a,s){t.exports=s.p+"assets/img/jvm-9.5.0eae90c5.png"},170:function(t,a,s){t.exports=s.p+"assets/img/jvm-9.6.f2c2f484.png"},177:function(t,a,s){"use strict";s.r(a);var v=[function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("div",{staticClass:"content"},[v("h1",{attrs:{id:"java垃圾回收"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java垃圾回收","aria-hidden":"true"}},[t._v("#")]),t._v(" java垃圾回收")]),t._v(" "),v("p"),v("div",{staticClass:"table-of-contents"},[v("ul",[v("li",[v("a",{attrs:{href:"#java4种引用类型"}},[t._v("java4种引用类型")]),v("ul",[v("li",[v("a",{attrs:{href:"#强引用"}},[t._v("强引用")])]),v("li",[v("a",{attrs:{href:"#软引用"}},[t._v("软引用")])]),v("li",[v("a",{attrs:{href:"#弱引用"}},[t._v("弱引用")])]),v("li",[v("a",{attrs:{href:"#虚引用"}},[t._v("虚引用")])]),v("li",[v("a",{attrs:{href:"#垃圾回收策略"}},[t._v("垃圾回收策略")])])])]),v("li",[v("a",{attrs:{href:"#垃圾判定"}},[t._v("垃圾判定")]),v("ul",[v("li",[v("a",{attrs:{href:"#引用计数法"}},[t._v("引用计数法")])]),v("li",[v("a",{attrs:{href:"#可达性分析"}},[t._v("可达性分析")])]),v("li",[v("a",{attrs:{href:"#stop-the-world以及安全点"}},[t._v("stop-the-world以及安全点")])])])]),v("li",[v("a",{attrs:{href:"#垃圾回收方法"}},[t._v("垃圾回收方法")]),v("ul",[v("li",[v("a",{attrs:{href:"#清除（sweep）"}},[t._v("清除（sweep）")])]),v("li",[v("a",{attrs:{href:"#压缩（compact）"}},[t._v("压缩（compact）")])]),v("li",[v("a",{attrs:{href:"#复制（copy）"}},[t._v("复制（copy）")])]),v("li",[v("a",{attrs:{href:"#垃圾回收分代思想"}},[t._v("垃圾回收分代思想")])]),v("li",[v("a",{attrs:{href:"#卡表"}},[t._v("卡表")])])])]),v("li",[v("a",{attrs:{href:"#垃圾回收器"}},[t._v("垃圾回收器")]),v("ul",[v("li",[v("a",{attrs:{href:"#新生代回收器"}},[t._v("新生代回收器")])]),v("li",[v("a",{attrs:{href:"#老年代回收器"}},[t._v("老年代回收器")])]),v("li",[v("a",{attrs:{href:"#g1回收器"}},[t._v("G1回收器")])]),v("li",[v("a",{attrs:{href:"#java11垃圾回收器"}},[t._v("java11垃圾回收器")])])])]),v("li",[v("a",{attrs:{href:"#垃圾回收的触发时机"}},[t._v("垃圾回收的触发时机")])])])]),v("p"),t._v(" "),v("h2",{attrs:{id:"java4种引用类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java4种引用类型","aria-hidden":"true"}},[t._v("#")]),t._v(" java4种引用类型")]),t._v(" "),v("p",[t._v("  java4种引用的级别由高到低依次为：强引用 > 软引用 > 弱引用 > 虚引用，具体如下：")]),t._v(" "),v("h3",{attrs:{id:"强引用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#强引用","aria-hidden":"true"}},[t._v("#")]),t._v(" 强引用")]),t._v(" "),v("p",[t._v("  把一个对象赋给一个引用变量，这个引用变量就是一个强引用。当一个对象被强引用变量引用时，它处于可达状态，\n它是不可能被垃圾回收机制回收的，即使该对象以后永远都不会被用到JVM也不会回收。不使用时，可以采用如下方式弱化引用：")]),t._v(" "),v("div",{staticClass:"language-java line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[t._v("Object o "),v("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{attrs:{class:"token class-name"}},[t._v("Object")]),v("span",{attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),v("span",{attrs:{class:"token comment"}},[t._v("//  强引用")]),t._v("\no "),v("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" null"),v("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),v("span",{attrs:{class:"token comment"}},[t._v("// 帮助垃圾收集器回收此对象")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br")])]),v("h3",{attrs:{id:"软引用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#软引用","aria-hidden":"true"}},[t._v("#")]),t._v(" 软引用")]),t._v(" "),v("p",[t._v("  引用需要用 SoftReference 类来实现，对于只有软引用的对象来说，当系统内存足够时它\n不会被回收，当系统内存空间不足时它会被回收。软引用通常用在对内存敏感的高速缓存。具体使用如下：")]),t._v(" "),v("div",{staticClass:"language-java line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[t._v("String str "),v("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{attrs:{class:"token class-name"}},[t._v("String")]),v("span",{attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{attrs:{class:"token string"}},[t._v('"abc"')]),v("span",{attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                                     "),v("span",{attrs:{class:"token comment"}},[t._v("// 强引用")]),t._v("\nSoftReference"),v("span",{attrs:{class:"token generics function"}},[v("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("String"),v("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" softRef "),v("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{attrs:{class:"token class-name"}},[t._v("SoftReference")]),v("span",{attrs:{class:"token generics function"}},[v("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("String"),v("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),v("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),v("span",{attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),v("span",{attrs:{class:"token comment"}},[t._v("//")]),t._v("\n\n"),v("span",{attrs:{class:"token comment"}},[t._v("//gc 时候处理方式")]),t._v("\n"),v("span",{attrs:{class:"token function"}},[t._v("If")]),v("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("JVM"),v("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("内存不足"),v("span",{attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   str "),v("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" null"),v("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),v("span",{attrs:{class:"token comment"}},[t._v("// 转换为软引用")]),t._v("\n   System"),v("span",{attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{attrs:{class:"token function"}},[t._v("gc")]),v("span",{attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),v("span",{attrs:{class:"token comment"}},[t._v("// 垃圾回收器进行回收")]),t._v("\n"),v("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br"),v("span",{staticClass:"line-number"},[t._v("8")]),v("br")])]),v("h3",{attrs:{id:"弱引用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#弱引用","aria-hidden":"true"}},[t._v("#")]),t._v(" 弱引用")]),t._v(" "),v("p",[t._v("  弱引用需要用"),v("code",[t._v("WeakReference")]),t._v("类来实现，它比软引用的生存期更短，对于只有弱引用的对象来说，\n只要垃圾回收机制一运行，不管JVM的内存空间是否足够，总会回收该对象占用的内存。具体使用如下：")]),t._v(" "),v("div",{staticClass:"language-java line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[t._v("String str"),v("span",{attrs:{class:"token operator"}},[t._v("=")]),v("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{attrs:{class:"token class-name"}},[t._v("String")]),v("span",{attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{attrs:{class:"token string"}},[t._v('"abc"')]),v("span",{attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nWeakReference"),v("span",{attrs:{class:"token generics function"}},[v("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("String"),v("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" abcWeakRef "),v("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{attrs:{class:"token class-name"}},[t._v("WeakReference")]),v("span",{attrs:{class:"token generics function"}},[v("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("String"),v("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),v("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),v("span",{attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),v("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("null"),v("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),v("span",{attrs:{class:"token comment"}},[t._v("//等价于")]),t._v("\nstr "),v("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" null"),v("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nSystem"),v("span",{attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{attrs:{class:"token function"}},[t._v("gc")]),v("span",{attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br")])]),v("h3",{attrs:{id:"虚引用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#虚引用","aria-hidden":"true"}},[t._v("#")]),t._v(" 虚引用")]),t._v(" "),v("p",[t._v("  虚引用需要"),v("code",[t._v("PhantomReference")]),t._v("类来实现，它不能单独使用，必须和引用队列联合使用。虚引用的主要作用是跟踪对象被垃圾回收的状态。\n当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。")]),t._v(" "),v("h3",{attrs:{id:"垃圾回收策略"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收策略","aria-hidden":"true"}},[t._v("#")]),t._v(" 垃圾回收策略")]),t._v(" "),v("p",[t._v("  4种引用垃圾回收策略，具体见下图：\n"),v("img",{attrs:{src:s(164),alt:"jvm-4种引用垃圾回收"}})]),t._v(" "),v("p",[t._v("  根据上图整理成下面图表结构：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("引用类型")]),t._v(" "),v("th",[t._v("被垃圾回收时间")]),t._v(" "),v("th",[t._v("用途")]),t._v(" "),v("th",[t._v("生存时间")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("强引用")]),t._v(" "),v("td",[t._v("从来不会")]),t._v(" "),v("td",[t._v("对象的一般状态")]),t._v(" "),v("td",[t._v("JVM停止运行时终止")])]),t._v(" "),v("tr",[v("td",[t._v("软引用")]),t._v(" "),v("td",[t._v("在内存不足时")]),t._v(" "),v("td",[t._v("对象缓存")]),t._v(" "),v("td",[t._v("内存不足时终止")])]),t._v(" "),v("tr",[v("td",[t._v("弱引用")]),t._v(" "),v("td",[t._v("在垃圾回收时")]),t._v(" "),v("td",[t._v("对象缓存")]),t._v(" "),v("td",[t._v("gc运行后终止")])]),t._v(" "),v("tr",[v("td",[t._v("虚引用")]),t._v(" "),v("td",[t._v("Unknown")]),t._v(" "),v("td",[t._v("Unknown")]),t._v(" "),v("td",[t._v("Unknown")])])])]),t._v(" "),v("h2",{attrs:{id:"垃圾判定"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#垃圾判定","aria-hidden":"true"}},[t._v("#")]),t._v(" 垃圾判定")]),t._v(" "),v("p",[t._v("  垃圾回收(Garbage Collection)是java虚拟机垃圾回收器提供的一种用于在空闲时间不定时回收无任何对象引用的对象占据的内存空间的一种机制。")]),t._v(" "),v("h3",{attrs:{id:"引用计数法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#引用计数法","aria-hidden":"true"}},[t._v("#")]),t._v(" 引用计数法")]),t._v(" "),v("p",[v("strong",[t._v("实现原理")]),t._v("：为每个对象添加一个引用计数器，用来统计指向该对象的引用个数。一旦某个对象的引用计数器为0，则说明该对象已经死亡，便可以被回收。")]),t._v(" "),v("p",[v("strong",[t._v("实现过程")]),t._v("：如果有一个引用，被赋值为某一对象，那么将该对象的引用计数器+1。如果一个指向某一对象的引用，被赋值为其他值，那么将该对象的引用计数器-1。\n也就是说，我们需要截获所有的引用更新操作，并且相应地增减目标对象的引用计数器。")]),t._v(" "),v("p",[v("strong",[t._v("缺点")]),t._v("：1、需要额外的空间来存储计数器，以及繁琐的更新操作；2、引用计数法还有一个重大的漏洞，那便是无法处理循环引用对象。")]),t._v(" "),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),v("p",[t._v("循环引用会导致内存泄漏")])]),t._v(" "),v("h3",{attrs:{id:"可达性分析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#可达性分析","aria-hidden":"true"}},[t._v("#")]),t._v(" 可达性分析")]),t._v(" "),v("p",[v("strong",[t._v("实现原理")]),t._v("：在于将一系列"),v("code",[t._v("GC Roots")]),t._v("作为初始的存活对象合集（"),v("code",[t._v("live set")]),t._v("），然后从该合集出发，探索所有能够被该集合引用到的对象，\n并将其加入到该集合中，这个过程我们也称之为标记（"),v("code",[t._v("mark")]),t._v("）。最终，未被探索到的对象便是死亡的，是可以回收的。")]),t._v(" "),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),v("p",[t._v("  我们可以暂时理解为"),v("strong",[t._v("由堆外指向堆内的引用")]),t._v("，一般而言，"),v("code",[t._v("GC Roots")]),t._v("包括如下几种："),v("br")]),t._v(" "),v("ul",[v("li",[t._v("java 方法栈桢中的局部变量；")]),t._v(" "),v("li",[t._v("已加载类的静态变量；")]),t._v(" "),v("li",[t._v("JNI handles；")]),t._v(" "),v("li",[t._v("已启动且未停止的java线程。")])])]),t._v(" "),v("p",[v("strong",[t._v("优点")]),t._v("：可达性分析可以解决引用计数法所不能解决的循环引用问题。举例来说，即便对象a和b相互引用，只要从"),v("code",[t._v("GC Roots")]),t._v("出发无法到达a或者b，\n那么可达性分析便不会将它们加入存活对象合集之中。")]),t._v(" "),v("p",[v("strong",[t._v("存在问题")]),t._v("：在多线程环境下，其他线程可能会更新已经访问过的对象中的引用，从而造成误报（将引用设置为 null）或者漏报（将引用设置为未被访问过的对象）。")]),t._v(" "),v("div",{staticClass:"warning custom-block"},[v("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),v("p",[t._v("  误报并没有什么伤害，Java 虚拟机至多损失了部分垃圾回收的机会。漏报则比较麻烦，因为垃圾回收器可能回收事实上仍被引用的对象内存。\n一旦从原引用访问已经被回收了的对象，则很有可能会直接导致 Java 虚拟机崩溃。")])]),t._v(" "),v("h3",{attrs:{id:"stop-the-world以及安全点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#stop-the-world以及安全点","aria-hidden":"true"}},[t._v("#")]),t._v(" stop-the-world以及安全点")]),t._v(" "),v("p",[v("strong",[t._v("概念")]),t._v("：Stop-the-world，停止其他非垃圾回收线程的工作，直到完成垃圾回收。这也就造成了垃圾回收所谓的暂停时间（GC pause）。")]),t._v(" "),v("p",[v("strong",[t._v("实现原理")]),t._v("：java虚拟机中的 Stop-the-world是通过安全点（"),v("code",[t._v("safepoint")]),t._v("）机制来实现的。当java虚拟机收到stop-the-world请求，\n它便会等待所有的线程都到达安全点，才允许请求Stop-the-world的线程进行独占的工作。")]),t._v(" "),v("p",[v("strong",[t._v("安全点实现原理")]),t._v(":安全点不是让其他线程停下，而是找到一个稳定的执行状态。在这个执行状态下，java虚拟机的堆栈不会发生变化。\n这么一来，垃圾回收器便能够“安全”地执行可达性分析。如何判定程序处在安全点，有以下方式：")]),t._v(" "),v("ul",[v("li",[t._v("使用JNI执行本地代码不访问java对象、调用java方法或者返回至原java方法，")]),t._v(" "),v("li",[t._v("线程处于阻塞状态为安全点，处于其他状态时，需要虚拟机保证在可预见的时间内进入安全点")]),t._v(" "),v("li",[t._v("解释执行字节码时，字节码与字节码之间皆可做安全点，jvm虚拟机会对执行的每条字节码进行安全点检测")]),t._v(" "),v("li",[t._v("执行及时编译器生成的字节码时，需要虚拟机插入安全点检测，避免长时间没有安全点检测")])]),t._v(" "),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),v("p",[t._v("第一，安全点检测本身也有一定的开销。不过 HotSpot 虚拟机已经将机器码中安全点检测简化为一个内存访问操作。\n在有安全点请求的情况下，java虚拟机会将安全点检测访问的内存所在的页设置为不可读，并且定义一个"),v("code",[t._v("segfault")]),t._v("处理器，来截获因访问该不可读内存而触发"),v("code",[t._v("segfault")]),t._v("线程，并将它们挂起。")]),t._v(" "),v("p",[t._v("第二，即时编译器生成的机器码打乱了原本栈桢上的对象分布状况。在进入安全点时，机器码还需提供一些额外的信息，来表明哪些寄存器，\n或者当前栈帧上的哪些内存空间存放着指向对象的引用，以便垃圾回收器能够枚举"),v("code",[t._v("GC Roots")]),t._v("。")])]),t._v(" "),v("h2",{attrs:{id:"垃圾回收方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 垃圾回收方法")]),t._v(" "),v("p",[t._v("  当标记完所有的存活对象时，我们便可以进行死亡对象的回收工作了。主流的基础回收方式可分为三种。")]),t._v(" "),v("h3",{attrs:{id:"清除（sweep）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#清除（sweep）","aria-hidden":"true"}},[t._v("#")]),t._v(" 清除（sweep）")]),t._v(" "),v("p",[t._v("  把死亡对象所占据的内存标记为空闲内存，并记录在一个空闲列表（"),v("code",[t._v("free list")]),t._v("）之中。\n当需要新建对象时，内存管理模块便会从该空闲列表中寻找空闲内存，并划分给新建的对象。具体见下图：\n"),v("img",{attrs:{src:s(165),alt:"jvm-9垃圾回收-清除"}})]),t._v(" "),v("p",[v("strong",[t._v("缺点")]),t._v("：一是会造成内存碎片。由于java虚拟机的堆中对象必须是连续分布的，因此可能出现总空闲内存足够，但是无法分配的极端情况。"),v("br"),t._v("\n另一个则是分配效率较低。如果是一块连续的内存空间，那么我们可以通过指针加法（"),v("code",[t._v("pointer bumping")]),t._v("）来做分配。而对于空闲列表，\njava虚拟机则需要逐个访问列表中的项，来查找能够放入新建对象的空闲内存。")]),t._v(" "),v("h3",{attrs:{id:"压缩（compact）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#压缩（compact）","aria-hidden":"true"}},[t._v("#")]),t._v(" 压缩（compact）")]),t._v(" "),v("p",[t._v("  即把存活的对象聚集到内存区域的起始位置，从而留下一段连续的内存空间。这种做法能够解决内存碎片化的问题，\n但代价是压缩算法的性能开销。具体见下图：\n"),v("img",{attrs:{src:s(166),alt:"jvm-9垃圾回收-压缩"}})]),t._v(" "),v("h3",{attrs:{id:"复制（copy）"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#复制（copy）","aria-hidden":"true"}},[t._v("#")]),t._v(" 复制（copy）")]),t._v(" "),v("p",[t._v("  即把内存区域分为两等分，分别用两个指针from和to来维护，并且只是用from指针指向的内存区域来分配内存。\n当发生垃圾回收时，便把存活的对象复制到to指针指向的内存区域中，并且交换from指针和to指针的内容。\n复制这种回收方式同样能够解决内存碎片化的问题，但是它的缺点也极其明显，即堆空间的使用效率极其低下。具体见下图：\n"),v("img",{attrs:{src:s(167),alt:"jvm-9垃圾回收-复制"}})]),t._v(" "),v("h3",{attrs:{id:"垃圾回收分代思想"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收分代思想","aria-hidden":"true"}},[t._v("#")]),t._v(" 垃圾回收分代思想")]),t._v(" "),v("p",[t._v("  java虚拟机将堆划分为新生代和老年代。其中，新生代又被划分为"),v("code",[t._v("Eden")]),t._v("区，以及两个大小相同的"),v("code",[t._v("Survivor")]),t._v("区。具体见下图：\n"),v("img",{attrs:{src:s(168),alt:"jvm-9垃圾回收-分代"}})]),t._v(" "),v("p",[t._v("  默认情况下，java虚拟机采取的是一种动态分配的策略（对应java虚拟机参数"),v("code",[t._v("-XX:+UsePSAdaptiveSurvivorSizePolicy")]),t._v("），\n根据生成对象的速率，以及"),v("code",[t._v("Survivor")]),t._v("区的使用情况动态调整"),v("code",[t._v("Eden")]),t._v("区和"),v("code",[t._v("Survivor")]),t._v("区的比例。")]),t._v(" "),v("p",[t._v("  当我们调用"),v("code",[t._v("new")]),t._v("指令时，它会在"),v("code",[t._v("Eden")]),t._v("区中划出一块作为存储对象的内存。由于堆空间是线程共享的，因此直接在这里边划空间是需要进行同步的。\njava虚拟机采用预先分配的方式，其每个线程可以向java虚拟机申请一段连续的内存，比如2048字节，作为线程私有的TLAB。\n这个操作需要加锁，线程需要维护两个指针（实际上可能更多，但重要也就两个），一个指向TLAB中空余内存的起始位置，一个则指向TLAB末尾。")]),t._v(" "),v("p",[t._v("  接下来的"),v("code",[t._v("new")]),t._v("指令，便可以直接通过指针加法（"),v("code",[t._v("bump the pointer")]),t._v("）来实现，即把指向空余内存位置的指针加上所请求的字节数。\n如果加法后空余内存指针的值仍小于或等于指向末尾的指针，则代表分配成功。否则，TLAB已经没有足够的空间来满足本次新建操作，\n则便需要当前线程重新申请新的TLAB。")]),t._v(" "),v("p",[t._v("  当"),v("code",[t._v("Eden")]),t._v("区的空间耗尽时，java虚拟机便会触发一次"),v("code",[t._v("Minor GC")]),t._v("，来收集新生代的垃圾。\n当发生"),v("code",[t._v("Minor GC")]),t._v("时，"),v("code",[t._v("Eden")]),t._v("区和"),v("code",[t._v("from")]),t._v("指向的"),v("code",[t._v("Survivor")]),t._v("区中的存活对象会被复制到"),v("code",[t._v("to")]),t._v("指向的"),v("code",[t._v("Survivor")]),t._v("区中，然后交换"),v("code",[t._v("from")]),t._v("和"),v("code",[t._v("to")]),t._v("指针，\n以保证下一次"),v("code",[t._v("Minor GC")]),t._v("时，"),v("code",[t._v("to")]),t._v("指向的"),v("code",[t._v("Survivor")]),t._v("区还是空的,同时java虚拟机会记录"),v("code",[t._v("Survivor")]),t._v("区中的对象被复制次数。")]),t._v(" "),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),v("ul",[v("li",[t._v("如果一个对象被复制的次数为15对应虚拟机参数"),v("code",[t._v("-XX:+MaxTenuringThreshold")]),t._v("），那么该对象将被晋升至老年代。"),v("br")]),t._v(" "),v("li",[t._v("如果单个"),v("code",[t._v("Survivor")]),t._v("区已经被占用了50%（对应虚拟机参数"),v("code",[t._v("-XX:TargetSurvivorRatio")]),t._v("），\n那么较高复制次数的对象也会被晋升至老年代。")])])]),t._v(" "),v("p",[v("strong",[t._v("优点")]),t._v("：年轻代使用标记-复制算法，由于需要复制的数据将非常少，因此效果较好，而且也不用对整个堆栈进行扫描。"),v("br"),t._v(" "),v("strong",[t._v("存在的问题")]),t._v("：老年代的对象引用年轻代中的对象，采用"),v("strong",[t._v("卡带")]),t._v("来解决全堆扫描问题。")]),t._v(" "),v("h3",{attrs:{id:"卡表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#卡表","aria-hidden":"true"}},[t._v("#")]),t._v(" 卡表")]),t._v(" "),v("p",[v("strong",[t._v("设计思想")]),t._v("：该技术将整个堆划分为一个个大小为512字节的卡，并且维护一个卡表，用来存储每张卡的一个标识位。\n这个标识位代表对应的卡是否可能存有指向新生代对象的引用，存在即为脏卡。在进行"),v("code",[t._v("Minor GC")]),t._v("的时候，我们便可以不用扫描整个老年代，\n而是在卡表中寻找脏卡，并将脏卡中的对象加入到"),v("code",[t._v("Minor GC")]),t._v("的"),v("code",[t._v("GC Roots")]),t._v("里。当完成所有脏卡的扫描之后，java虚拟机便会将所有脏卡的标识位清零。")]),t._v(" "),v("p",[v("strong",[t._v("实现过程")]),t._v("："),v("code",[t._v("Minor GC")]),t._v("复制存活对象时，导致所有指向该对象的引用更新，最终引用所在的卡的标识位重新设置，\n这样可以确保脏卡中必定包含指向新生代对象的引用。具体实现时，java虚拟机需要截获每个引用型实例变量的写操作，\n并作出对应的写标识位操作。")]),t._v(" "),v("p",[v("strong",[t._v("存在问题")]),t._v("：在即时编译器生成的机器码中，需要使用写屏障（"),v("code",[t._v("write barrier")]),t._v("，注意不要和"),v("code",[t._v("volatile")]),t._v("字段的写屏障混淆）实现脏卡识别。\n写屏障并不会判断更新后的引用是否指向新生代中的对象，采用悲观的方式，一律当成可能指向新生代对象的引用。\njava虚拟机便是通过这种方式来从地址映射到卡表中的索引的。缺点：新增开销，优点：提升吞吐率（应用运行时间/(应用运行时间+垃圾回收时间)。\n具体如下：")]),t._v(" "),v("div",{staticClass:"language-java line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{attrs:{class:"token comment"}},[t._v("//会被编译成移位指令和存储指令")]),t._v("\nCARD_TABLE "),v("span",{attrs:{class:"token punctuation"}},[t._v("[")]),v("span",{attrs:{class:"token keyword"}},[t._v("this")]),t._v(" address "),v("span",{attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),v("span",{attrs:{class:"token number"}},[t._v("9")]),v("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),v("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" DIRTY"),v("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),v("span",{attrs:{class:"token comment"}},[t._v("//右移9位相当于除以512，")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br")])]),v("h2",{attrs:{id:"垃圾回收器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器","aria-hidden":"true"}},[t._v("#")]),t._v(" 垃圾回收器")]),t._v(" "),v("h3",{attrs:{id:"新生代回收器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#新生代回收器","aria-hidden":"true"}},[t._v("#")]),t._v(" 新生代回收器")]),t._v(" "),v("p",[v("img",{attrs:{src:s(169),alt:"jvm-9垃圾回收-新生代"}})]),t._v(" "),v("h3",{attrs:{id:"老年代回收器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#老年代回收器","aria-hidden":"true"}},[t._v("#")]),t._v(" 老年代回收器")]),t._v(" "),v("p",[v("img",{attrs:{src:s(170),alt:"jvm-9垃圾回收-老年代"}})]),t._v(" "),v("h3",{attrs:{id:"g1回收器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#g1回收器","aria-hidden":"true"}},[t._v("#")]),t._v(" G1回收器")]),t._v(" "),v("p",[v("strong",[t._v("并行与并发")]),t._v("：G1能充分利用多CPU、多核环境下的硬件优势，缩短Stop-The-World停顿的时间，使用并发的方式减少停顿时间。")]),t._v(" "),v("p",[v("strong",[t._v("分代收集")]),t._v("：使用分代的方式，采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。")]),t._v(" "),v("p",[v("strong",[t._v("空间整合")]),t._v("：采用“标记—整理”算法，不会产生内存空间碎片，收集后能提供规整的可用内存。")]),t._v(" "),v("p",[v("strong",[t._v("内存布局")]),t._v("：整个Java堆划分为多个大小相等的独立区域（"),v("code",[t._v("Region")]),t._v("），虽然还保留有新生代和老年代的概念，均是一部分Region（不需要连续）的集合。")]),t._v(" "),v("h3",{attrs:{id:"java11垃圾回收器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#java11垃圾回收器","aria-hidden":"true"}},[t._v("#")]),t._v(" java11垃圾回收器")]),t._v(" "),v("h2",{attrs:{id:"垃圾回收的触发时机"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收的触发时机","aria-hidden":"true"}},[t._v("#")]),t._v(" 垃圾回收的触发时机")]),t._v(" "),v("ul",[v("li",[t._v("Minor GC触发条件：当Eden区满时，触发Minor GC。")]),t._v(" "),v("li",[t._v("Full GC触发条件：\n"),v("ul",[v("li",[t._v("调用System.gc时，系统建议执行Full GC，但是不必然执行")]),t._v(" "),v("li",[t._v("老年代空间不足")]),t._v(" "),v("li",[t._v("方法去空间不足")]),t._v(" "),v("li",[t._v("通过Minor GC后进入老年代的平均大小大于老年代的可用内存")]),t._v(" "),v("li",[t._v("由Eden区、From Space区向To Space区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小")])])])])])}],n=s(0),_=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},v,!1,null,null,null);_.options.__file="java垃圾回收.md";a.default=_.exports}}]);