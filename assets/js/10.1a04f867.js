(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{224:function(t,a,e){"use strict";e.r(a);var r=e(0),i=Object(r.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),e("p"),t._m(1),e("p"),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),e("p",[e("a",{attrs:{href:"https://time.geekbang.org/column/article/90515",target:"_blank",rel:"noopener noreferrer"}},[t._v("java并发编程实战-王宝令"),e("OutboundLink")],1)])])},[function(){var t=this.$createElement,a=this._self._c||t;return a("h1",{attrs:{id:"java并发编程-王宝令课程总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java并发编程-王宝令课程总结","aria-hidden":"true"}},[this._v("#")]),this._v(" java并发编程-王宝令课程总结")])},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#可见性、原子性和有序性"}},[t._v("可见性、原子性和有序性")])]),e("li",[e("a",{attrs:{href:"#java内存模型主要解决可见性和有序性"}},[t._v("java内存模型主要解决可见性和有序性")])]),e("li",[e("a",{attrs:{href:"#利用互斥锁解决原子性问题"}},[t._v("利用互斥锁解决原子性问题")])]),e("li",[e("a",{attrs:{href:"#解决实际工程问题-解决上述三个问题带来的实际问题"}},[t._v("解决实际工程问题(解决上述三个问题带来的实际问题)")])]),e("li",[e("a",{attrs:{href:"#并发编程基本模型-java并发理论基础mesa模型"}},[t._v("并发编程基本模型(java并发理论基础MESA模型)")]),e("ul",[e("li",[e("a",{attrs:{href:"#模型解决：互斥与同步"}},[t._v("模型解决：互斥与同步")])]),e("li",[e("a",{attrs:{href:"#基本模型"}},[t._v("基本模型")])])])]),e("li",[e("a",{attrs:{href:"#java线程"}},[t._v("java线程")]),e("ul",[e("li",[e("a",{attrs:{href:"#java-线程的生命周期，runnable使用cpu-仅"}},[t._v("java 线程的生命周期，runnable使用CPU(仅)")])]),e("li",[e("a",{attrs:{href:"#线程总数如何确定？"}},[t._v("线程总数如何确定？")])]),e("li",[e("a",{attrs:{href:"#java局部变量线程安全问题"}},[t._v("java局部变量线程安全问题")])])])]),e("li",[e("a",{attrs:{href:"#实际工程如何使用线程"}},[t._v("实际工程如何使用线程")])]),e("li",[e("a",{attrs:{href:"#java-concurrent并发包"}},[t._v("java Concurrent并发包")]),e("ul",[e("li",[e("a",{attrs:{href:"#lock和condition来实现monitor，即mesa模型，其中lock解决互斥，condition解决同步"}},[t._v("Lock和Condition来实现monitor，即MESA模型，其中Lock解决互斥，Condition解决同步")])]),e("li",[e("a",{attrs:{href:"#lock和condition使用管程来实现异步转同步"}},[t._v("Lock和Condition使用管程来实现异步转同步")])]),e("li",[e("a",{attrs:{href:"#readwritelock、stampedlock锁"}},[t._v("ReadWriteLock、StampedLock锁")])])])]),e("li",[e("a",{attrs:{href:"#java-进程间协同操作：信号量机制"}},[t._v("java 进程间协同操作：信号量机制")]),e("ul",[e("li",[e("a",{attrs:{href:"#countdownlatch和cyclicbarrier"}},[t._v("CountDownLatch和CyclicBarrier")])])])]),e("li",[e("a",{attrs:{href:"#附录"}},[t._v("附录")])])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"可见性、原子性和有序性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可见性、原子性和有序性","aria-hidden":"true"}},[this._v("#")]),this._v(" 可见性、原子性和有序性")])},function(){var t=this.$createElement,a=this._self._c||t;return a("ul",[a("li",[this._v("缓存导致的可见性问题")]),this._v(" "),a("li",[this._v("线程切换带来的原子性问题")]),this._v(" "),a("li",[this._v("编译优化带来的有序性问题")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"java内存模型主要解决可见性和有序性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java内存模型主要解决可见性和有序性","aria-hidden":"true"}},[this._v("#")]),this._v(" java内存模型主要解决可见性和有序性")])},function(){var t=this.$createElement,a=this._self._c||t;return a("ul",[a("li",[this._v("valatile、synchronized和final")]),this._v(" "),a("li",[this._v("Happens-before基本原则")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"利用互斥锁解决原子性问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#利用互斥锁解决原子性问题","aria-hidden":"true"}},[this._v("#")]),this._v(" 利用互斥锁解决原子性问题")])},function(){var t=this.$createElement,a=this._self._c||t;return a("ul",[a("li",[this._v("synchronized关键字")]),this._v(" "),a("li",[this._v("锁粒度、死锁问题检测")]),this._v(" "),a("li",[this._v("线程间的协助机制，等待通知(wait-notify)")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"解决实际工程问题-解决上述三个问题带来的实际问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决实际工程问题-解决上述三个问题带来的实际问题","aria-hidden":"true"}},[this._v("#")]),this._v(" 解决实际工程问题(解决上述三个问题带来的实际问题)")])},function(){var t=this.$createElement,a=this._self._c||t;return a("ul",[a("li",[this._v("安全性")]),this._v(" "),a("li",[this._v("活跃性问题：死锁以及饥饿")]),this._v(" "),a("li",[this._v("性能问题")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"并发编程基本模型-java并发理论基础mesa模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发编程基本模型-java并发理论基础mesa模型","aria-hidden":"true"}},[this._v("#")]),this._v(" 并发编程基本模型(java并发理论基础MESA模型)")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"模型解决：互斥与同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模型解决：互斥与同步","aria-hidden":"true"}},[this._v("#")]),this._v(" 模型解决：互斥与同步")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"基本模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本模型","aria-hidden":"true"}},[this._v("#")]),this._v(" 基本模型")])},function(){var t=this.$createElement,a=this._self._c||t;return a("ul",[a("li",[this._v("MESA模型(monitor)：wait() notify() notifyAll()")]),this._v(" "),a("li",[this._v("Hasen模型")]),this._v(" "),a("li",[this._v("Hoare模型")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"java线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java线程","aria-hidden":"true"}},[this._v("#")]),this._v(" java线程")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"java-线程的生命周期，runnable使用cpu-仅"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-线程的生命周期，runnable使用cpu-仅","aria-hidden":"true"}},[this._v("#")]),this._v(" java 线程的生命周期，runnable使用CPU(仅)")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"线程总数如何确定？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程总数如何确定？","aria-hidden":"true"}},[this._v("#")]),this._v(" 线程总数如何确定？")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"java局部变量线程安全问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java局部变量线程安全问题","aria-hidden":"true"}},[this._v("#")]),this._v(" java局部变量线程安全问题")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"实际工程如何使用线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实际工程如何使用线程","aria-hidden":"true"}},[this._v("#")]),this._v(" 实际工程如何使用线程")])},function(){var t=this.$createElement,a=this._self._c||t;return a("ul",[a("li",[this._v("封装共享变量")]),this._v(" "),a("li",[this._v("识别共享变量间的约束关系：会带来原子性问题")]),this._v(" "),a("li",[this._v("指定并发策略")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"java-concurrent并发包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-concurrent并发包","aria-hidden":"true"}},[this._v("#")]),this._v(" java Concurrent并发包")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"lock和condition来实现monitor，即mesa模型，其中lock解决互斥，condition解决同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lock和condition来实现monitor，即mesa模型，其中lock解决互斥，condition解决同步","aria-hidden":"true"}},[this._v("#")]),this._v(" Lock和Condition来实现monitor，即MESA模型，其中Lock解决互斥，Condition解决同步")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"lock和condition使用管程来实现异步转同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lock和condition使用管程来实现异步转同步","aria-hidden":"true"}},[this._v("#")]),this._v(" Lock和Condition使用管程来实现异步转同步")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"readwritelock、stampedlock锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#readwritelock、stampedlock锁","aria-hidden":"true"}},[this._v("#")]),this._v(" ReadWriteLock、StampedLock锁")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"java-进程间协同操作：信号量机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-进程间协同操作：信号量机制","aria-hidden":"true"}},[this._v("#")]),this._v(" java 进程间协同操作：信号量机制")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"countdownlatch和cyclicbarrier"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#countdownlatch和cyclicbarrier","aria-hidden":"true"}},[this._v("#")]),this._v(" CountDownLatch和CyclicBarrier")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"附录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附录","aria-hidden":"true"}},[this._v("#")]),this._v(" 附录")])}],!1,null,null,null);i.options.__file="README.md";a.default=i.exports}}]);