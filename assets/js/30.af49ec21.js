(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{173:function(a,t,s){a.exports=s.p+"assets/img/jvm-3.c8fac8df.png"},198:function(a,t,s){"use strict";s.r(t);var v=[function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("div",{staticClass:"content"},[v("h1",{attrs:{id:"jvm-加载原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jvm-加载原理","aria-hidden":"true"}},[a._v("#")]),a._v(" jvm 加载原理")]),a._v(" "),v("p"),v("div",{staticClass:"table-of-contents"},[v("ul",[v("li",[v("a",{attrs:{href:"#加载过程"}},[a._v("加载过程")])]),v("li",[v("a",{attrs:{href:"#加载"}},[a._v("加载")]),v("ul",[v("li",[v("a",{attrs:{href:"#加载过程"}},[a._v("加载过程")])]),v("li",[v("a",{attrs:{href:"#jvm类加载器"}},[a._v("JVM类加载器")])]),v("li",[v("a",{attrs:{href:"#双亲委派机制"}},[a._v("双亲委派机制")])])])]),v("li",[v("a",{attrs:{href:"#链接"}},[a._v("链接")]),v("ul",[v("li",[v("a",{attrs:{href:"#验证"}},[a._v("验证")])]),v("li",[v("a",{attrs:{href:"#准备"}},[a._v("准备")])]),v("li",[v("a",{attrs:{href:"#解析"}},[a._v("解析")])]),v("li",[v("a",{attrs:{href:"#初始化"}},[a._v("初始化")])])])])])]),v("p"),a._v(" "),v("h2",{attrs:{id:"加载过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#加载过程","aria-hidden":"true"}},[a._v("#")]),a._v(" 加载过程")]),a._v(" "),v("p",[a._v("  class文件加载到内存的类，需要经过加载、链接以及初始化三大步骤。"),v("br"),a._v("\n  java类型分为基本类型和引用类型，基本类型是由java虚拟机预定义。引用类型可以细分为：类、接口、数组和泛型参数。\n泛型参数需要在编译期间被擦除，数组类会被java虚拟机直接生成。只有接口和类是java编译器生成class文件。具体加载过程如下：\n"),v("img",{attrs:{src:s(173),alt:"jvm类加载过程-3"}})]),a._v(" "),v("h2",{attrs:{id:"加载"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#加载","aria-hidden":"true"}},[a._v("#")]),a._v(" 加载")]),a._v(" "),v("h3",{attrs:{id:"加载过程-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#加载过程-2","aria-hidden":"true"}},[a._v("#")]),a._v(" 加载过程")]),a._v(" "),v("ul",[v("li",[a._v("通过一个类的全限定名来获取定义此类的二进制字节流。")]),a._v(" "),v("li",[a._v("将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。")]),a._v(" "),v("li",[a._v("在Java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口。")])]),a._v(" "),v("h3",{attrs:{id:"jvm类加载器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#jvm类加载器","aria-hidden":"true"}},[a._v("#")]),a._v(" JVM类加载器")]),a._v(" "),v("p",[a._v("  类加载器（classloader）用来加载Java类到Java虚拟机中。一般来说，Java虚拟机使用Java类的方式如下：Java源程序（"),v("code",[a._v(".java")]),a._v(" 文件）\n在经过"),v("code",[a._v("java")]),a._v("编译器编译之后就被转换成 Java 字节代码（.class 文件）。\n类加载器负责读取"),v("code",[a._v("java")]),a._v("字节代码，并转换成"),v("code",[a._v("java.lang.Class")]),a._v("类的一个实例。")]),a._v(" "),v("ul",[v("li",[v("strong",[a._v("启动（"),v("code",[a._v("Bootstrap")]),a._v("）类加载器")]),a._v(": 本地代码实现的类装入器，负责将<"),v("code",[a._v("Java_Runtime_Home>/lib")]),a._v("下面的类库加载到内存（比如"),v("code",[a._v("rt.jar")]),a._v("）。\n由于引导类加载器涉及到虚拟机本地实现细节，开发者无法直接获取到启动类加载器的引用，所以不允许直接通过引用进行操作。")]),a._v(" "),v("li",[v("strong",[a._v("标准扩展（"),v("code",[a._v("Extension")]),a._v("）类加载器")]),a._v(": 由"),v("code",[a._v("ExtClassLoader")]),a._v("("),v("code",[a._v("sun.misc.Launcher$ExtClassLoader")]),a._v("）实现,\n负责将"),v("code",[a._v("<Java_Runtime_Home>/lib/ext")]),a._v("或者由系统变量"),v("code",[a._v("java.ext.dir")]),a._v("指定位置中的类库加载到内存。\n开发者可以直接使用标准扩展类加载器。")]),a._v(" "),v("li",[v("strong",[a._v("系统（System）类加载器")]),a._v("：由"),v("code",[a._v("AppClassLoader")]),a._v("（"),v("code",[a._v("sun.misc.Launcher$AppClassLoader")]),a._v("）实现,\n负责将系统类路径（"),v("code",[a._v("classpath")]),a._v("、"),v("code",[a._v("-cp/-classpath")]),a._v("）中指定的类库加载到内存中。开发者可以直接使用系统类加载器。")])]),a._v(" "),v("h3",{attrs:{id:"双亲委派机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派机制","aria-hidden":"true"}},[a._v("#")]),a._v(" 双亲委派机制")]),a._v(" "),v("ul",[v("li",[a._v("机制原理")])]),a._v(" "),v("p",[a._v("  某个特定的类加载器在接到加载类的请求时，首先将加载任务委托给父类加载器，依次递归，\n如果父类加载器可以完成类加载任务，就成功返回；只有父类加载器无法完成此加载任务时，才自己去加载。")]),a._v(" "),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),v("p",[a._v("系统（"),v("code",[a._v("System")]),a._v("）类加载器 ->标准扩展（"),v("code",[a._v("Extension")]),a._v("）类加载器->启动（"),v("code",[a._v("Bootstrap")]),a._v("）类加载器 "),v("strong",[a._v("依次递归")])])]),a._v(" "),v("ul",[v("li",[a._v("SPI打破双亲委派机制 线程上下文类加载器")])]),a._v(" "),v("p",[a._v("  SPI的接口由java核心库来提供，依赖jar包存放在<"),v("code",[a._v("Java_Runtime_Home>/lib")]),a._v("中，由启动类加载器("),v("code",[a._v("BootstrapClassloader")]),a._v(")来加载。\n而SPI的实现类是由系统类加载器("),v("code",[a._v("System ClassLoader")]),a._v(")来加载的。根据依照双亲委派模型，"),v("code",[a._v("BootstrapClassloader")]),a._v("无法委派"),v("code",[a._v("AppClassLoader")]),a._v("来加载类。"),v("br")]),a._v(" "),v("p",[a._v("  线程上下文类加载器（"),v("code",[a._v("contextClassLoader")]),a._v("）是从JDK1.2开始引入。"),v("code",[a._v("java.lang.Thread")]),a._v("类中的方法"),v("code",[a._v("getContextClassLoader()")]),a._v("和"),v("code",[a._v("setContextClassLoader(ClassLoader cl)")]),a._v("用来获取和设置线程的上下文类加载器。如果没有通过"),v("code",[a._v("setContextClassLoader(ClassLoader cl)")]),a._v("进行设置的话，\n线程将继承其父线程的上下文类加载器。在线程中运行的代码可以通过此类加载器来加载类和资源。在SPI接口的代码中使用线程上下文类加载器，就可以成功的加载到SPI实现类。")]),a._v(" "),v("h2",{attrs:{id:"链接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#链接","aria-hidden":"true"}},[a._v("#")]),a._v(" 链接")]),a._v(" "),v("p",[a._v("  链接，是指将创建成的类合并至java虚拟机中，使之能够执行的过程。它可分为"),v("strong",[a._v("验证")]),a._v("、"),v("strong",[a._v("准备")]),a._v("以及"),v("strong",[a._v("解析")]),a._v("三个阶段。")]),a._v(" "),v("h3",{attrs:{id:"验证"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#验证","aria-hidden":"true"}},[a._v("#")]),a._v(" 验证")]),a._v(" "),v("p",[a._v("  验证阶段确保被加载类能够满足java虚拟机的约束条件，具体检查一下内容：")]),a._v(" "),v("ul",[v("li",[a._v("1.文件格式验证：\n"),v("ul",[v("li",[a._v("是否以魔数"),v("code",[a._v("0xCAFEBABE")]),a._v("开头")]),a._v(" "),v("li",[a._v("主、次版本号是否在当前虚拟机处理范围之内")]),a._v(" "),v("li",[a._v("常量池的常量中是否有不被支持的常量类型（检查常量"),v("strong",[a._v("tag标志")]),a._v("）")]),a._v(" "),v("li",[a._v("指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量")]),a._v(" "),v("li",[v("code",[a._v("CONSTANT_Utf8_info")]),a._v("型的常量中是否有不符合"),v("code",[a._v("UTF8")]),a._v("编码的数据")]),a._v(" "),v("li",[a._v("Class文件中各个部分及文件本身是否有被删除的或附加的其他信息")])])]),a._v(" "),v("li",[a._v("2.元数据验证：\n"),v("ul",[v("li",[a._v("这个类是否有父类（除了"),v("code",[a._v("java.lang.Object")]),a._v("之外，所有类都应当有父类）。")]),a._v(" "),v("li",[a._v("这个类是否继承了不允许被继承的类（被"),v("code",[a._v("final")]),a._v("修饰的类）。")]),a._v(" "),v("li",[a._v("如果这个类不是抽象类，是否实现了其父类或接口之中所要求实现的所有方法。")]),a._v(" "),v("li",[a._v("类中的字段、方法是否与父类产生矛盾（例如覆盖了父类的"),v("code",[a._v("final")]),a._v("字段，或者出现不符合规则的方法重载，例如方法参数都一致，但返回值类型却不同等等）。")])])]),a._v(" "),v("li",[a._v("3.字节码验证："),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),v("p",[a._v("主要目的是通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。这个阶段将对类的方法体进行校验分析，保证被校验类的方法在运行时不会产生危害虚拟机安全的事件，")])]),a._v(" "),v("ul",[v("li",[a._v("保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似这样的情况：在操作数栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中。")]),a._v(" "),v("li",[a._v("保证跳转指令不会跳转到方法体以外的字节码指令上。")]),a._v(" "),v("li",[a._v("保证方法体中的类型转换是有效的，例如可以把一个子类对象赋值给父类数据类型，但是把父类对象赋值给子类数据类型，甚至把对象赋值给与它毫无继承关系、完全不相干的一个数据类型，则是危险不合法的。")])]),a._v(" "),v("div",{staticClass:"warning custom-block"},[v("p",{staticClass:"custom-block-title"},[a._v("WARNING")]),a._v(" "),v("p",[a._v("通过程序去校验程序逻辑是无法做到绝对准确的——不能通过程序准确的检查出程序是否能在有限时间之内结束运行")])])]),a._v(" "),v("li",[a._v("4.符号引用验证："),v("div",{staticClass:"tip custom-block"},[v("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),v("p",[a._v("符号引用验证可以看作是类对自身以外（常量池中的各种符号引用）的信息进行匹配性校验")])]),a._v(" "),v("ul",[v("li",[a._v("符号引用中通过字符串描述的全限定名是否能够找到对应的类。")]),a._v(" "),v("li",[a._v("在指定类中是否存在符合方法的字段描述符以及简单名称所描述的方法和字段。")]),a._v(" "),v("li",[a._v("符号引用中的类、字段、方法的访问性（"),v("code",[a._v("private")]),a._v("、"),v("code",[a._v("protected")]),a._v("、"),v("code",[a._v("public")]),a._v("、"),v("code",[a._v("default")]),a._v("）是否可被当前类访问。")])])])]),a._v(" "),v("h3",{attrs:{id:"准备"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#准备","aria-hidden":"true"}},[a._v("#")]),a._v(" 准备")]),a._v(" "),v("p",[a._v("  为被加载类的静态字段分配内存。同时被"),v("code",[a._v("static")]),a._v("和"),v("code",[a._v("final")]),a._v("修饰的变量(基本类型和"),v("code",[a._v("String")]),a._v(")拥有"),v("code",[a._v("ConstantValue")]),a._v("属性，编译时"),v("code",[a._v("javac")]),a._v("将为该变量生成"),v("code",[a._v("ConstantValue")]),a._v("属性，\n准备阶段会根据"),v("code",[a._v("ConstantValue")]),a._v("属性设置相应的值，其他则在类构造器中初始化。")]),a._v(" "),v("h3",{attrs:{id:"解析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#解析","aria-hidden":"true"}},[a._v("#")]),a._v(" 解析")]),a._v(" "),v("p",[a._v("  编译阶段java虚拟机会将自己的类以及其他类方法、字段对应的地址生成符号引用，在解析阶段java虚拟机会将这些符号引用解析成具体实际引用。\n如果符号引用指定一个未被加载的类，或者未被加载的字段或者方法，那么解析将触发这个类的加载(但未必触发这个类的链接以及初始化)。")]),a._v(" "),v("h3",{attrs:{id:"初始化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#初始化","aria-hidden":"true"}},[a._v("#")]),a._v(" 初始化")]),a._v(" "),v("p",[a._v("  直接赋值操作和所有静态代码块中的代码，会被java编译至于同一方法"),v("code",[a._v("<clint>")]),a._v("中。初始化操作则是为标记为常量值的字段赋值，以及执行"),v("code",[a._v("<clint>")]),a._v("方法的过程。\n类的初始化触发时机：")]),a._v(" "),v("ul",[v("li",[a._v("当虚拟机启动时，初始化用户指定的主类")]),a._v(" "),v("li",[a._v("当遇到用以新建目标类实例的new指令时，初始化new指令的目标类")]),a._v(" "),v("li",[a._v("当遇到调用静态方法的指令时，初始化该静态方法所在的类")]),a._v(" "),v("li",[a._v("当遇到访问静态字段的指令时，初始化该静态字段所在的类")]),a._v(" "),v("li",[a._v("子类的初始化会触发父类的初始化")]),a._v(" "),v("li",[a._v("如果一个接口定义了"),v("code",[a._v("default")]),a._v("方法，那么直接实现或者间接实现该接口的类的初始化，会触发该接口的初始化；")]),a._v(" "),v("li",[a._v("使用反射API对某个类进行反射调用时，初始化这个类")]),a._v(" "),v("li",[a._v("当初次调用"),v("code",[a._v("MethodHandle")]),a._v("实例时，初始化该"),v("code",[a._v("MethodHandle")]),a._v("指向方法所在的类")])]),a._v(" "),v("p",[a._v("附录单例延迟初始化的经典代码：")]),a._v(" "),v("div",{staticClass:"language-java line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-java"}},[v("code",[v("span",{attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),v("span",{attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),v("span",{attrs:{class:"token class-name"}},[a._v("Singleton")]),a._v(" "),v("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),v("span",{attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),v("span",{attrs:{class:"token function"}},[a._v("Singleton")]),v("span",{attrs:{class:"token punctuation"}},[a._v("(")]),v("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),v("span",{attrs:{class:"token punctuation"}},[a._v("{")]),v("span",{attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  "),v("span",{attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),v("span",{attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),v("span",{attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),v("span",{attrs:{class:"token class-name"}},[a._v("LazyHolder")]),a._v(" "),v("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),v("span",{attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),v("span",{attrs:{class:"token keyword"}},[a._v("final")]),a._v(" Singleton INSTANCE "),v("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),v("span",{attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),v("span",{attrs:{class:"token class-name"}},[a._v("Singleton")]),v("span",{attrs:{class:"token punctuation"}},[a._v("(")]),v("span",{attrs:{class:"token punctuation"}},[a._v(")")]),v("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),v("span",{attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  "),v("span",{attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),v("span",{attrs:{class:"token keyword"}},[a._v("static")]),a._v(" Singleton "),v("span",{attrs:{class:"token function"}},[a._v("getInstance")]),v("span",{attrs:{class:"token punctuation"}},[a._v("(")]),v("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),v("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),v("span",{attrs:{class:"token keyword"}},[a._v("return")]),a._v(" LazyHolder"),v("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("INSTANCE"),v("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),v("span",{attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),v("span",{attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[a._v("1")]),v("br"),v("span",{staticClass:"line-number"},[a._v("2")]),v("br"),v("span",{staticClass:"line-number"},[a._v("3")]),v("br"),v("span",{staticClass:"line-number"},[a._v("4")]),v("br"),v("span",{staticClass:"line-number"},[a._v("5")]),v("br"),v("span",{staticClass:"line-number"},[a._v("6")]),v("br"),v("span",{staticClass:"line-number"},[a._v("7")]),v("br"),v("span",{staticClass:"line-number"},[a._v("8")]),v("br"),v("span",{staticClass:"line-number"},[a._v("9")]),v("br")])])])}],_=s(0),e=Object(_.a)({},function(){this.$createElement;this._self._c;return this._m(0)},v,!1,null,null,null);e.options.__file="jvm加载原理.md";t.default=e.exports}}]);