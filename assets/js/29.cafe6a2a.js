(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{171:function(a,s,t){a.exports=t.p+"assets/img/jvm-1.ab5c3523.png"},172:function(a,s,t){a.exports=t.p+"assets/img/jvm-1.2.5ee35109.png"},199:function(a,s,t){"use strict";t.r(s);var n=[function(){var a=this,s=a.$createElement,n=a._self._c||s;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"java运行原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java运行原理","aria-hidden":"true"}},[a._v("#")]),a._v(" java运行原理")]),a._v(" "),n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#字节码生成工具asmtools"}},[a._v("字节码生成工具AsmTools")]),n("ul",[n("li",[n("a",{attrs:{href:"#简介asmtools"}},[a._v("简介AsmTools")])]),n("li",[n("a",{attrs:{href:"#构建asmtools"}},[a._v("构建AsmTools")])]),n("li",[n("a",{attrs:{href:"#使用"}},[a._v("使用")])])])]),n("li",[n("a",{attrs:{href:"#java运行环境"}},[a._v("java运行环境")])]),n("li",[n("a",{attrs:{href:"#jvm的必要性"}},[a._v("JVM的必要性")])]),n("li",[n("a",{attrs:{href:"#运行过程"}},[a._v("运行过程")]),n("ul",[n("li",[n("a",{attrs:{href:"#虚拟机角度"}},[a._v("虚拟机角度")])]),n("li",[n("a",{attrs:{href:"#硬件角度"}},[a._v("硬件角度")])])])]),n("li",[n("a",{attrs:{href:"#效率提升"}},[a._v("效率提升")])])])]),n("p"),a._v(" "),n("h2",{attrs:{id:"字节码生成工具asmtools"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字节码生成工具asmtools","aria-hidden":"true"}},[a._v("#")]),a._v(" 字节码生成工具AsmTools")]),a._v(" "),n("h3",{attrs:{id:"简介asmtools"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介asmtools","aria-hidden":"true"}},[a._v("#")]),a._v(" 简介AsmTools")]),a._v(" "),n("p",[a._v("  工欲善其事必先利其器，首先来介绍AsmTools：OpenJDK提供一个AsmTools工具，用来生成正确的或者不正确的java"),n("code",[a._v(".class")]),a._v("文件，主要用来测试和验证。\nAsmTools引入了两种表示.class文件的语法：")]),a._v(" "),n("ul",[n("li",[a._v("JASM")])]),a._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),n("p",[a._v("用类似java本身的语法来定义类和函数，字节码指令则很像传统的汇编。")])]),a._v(" "),n("ul",[n("li",[a._v("JCOD")])]),a._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),n("p",[a._v("整个.class用容器的方式来表示，可以很清楚表示类文件的结构。")])]),a._v(" "),n("h3",{attrs:{id:"构建asmtools"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#构建asmtools","aria-hidden":"true"}},[a._v("#")]),a._v(" 构建AsmTools")]),a._v(" "),n("ul",[n("li",[a._v("clone 代码")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("git clone http://hg.openjdk.java.net/code-tools/asmtools\nwget http://hg.openjdk.java.net/code-tools/asmtools\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br")])]),n("ul",[n("li",[a._v("编绎")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("cd asmtools/build\nant\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br")])]),n("h3",{attrs:{id:"使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用","aria-hidden":"true"}},[a._v("#")]),a._v(" 使用")]),a._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[a._v("$ echo '\n"),n("span",{attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),n("span",{attrs:{class:"token class-name"}},[a._v("Foo")]),a._v(" "),n("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n "),n("span",{attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),n("span",{attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),n("span",{attrs:{class:"token function"}},[a._v("main")]),n("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("String"),n("span",{attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),n("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),n("span",{attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" flag "),n("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{attrs:{class:"token boolean"}},[a._v("true")]),n("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),n("span",{attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),n("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("flag"),n("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" System"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{attrs:{class:"token function"}},[a._v("println")]),n("span",{attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{attrs:{class:"token string"}},[a._v('"Hello, Java!"')]),n("span",{attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),n("span",{attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),n("span",{attrs:{class:"token punctuation"}},[a._v("(")]),a._v("flag "),n("span",{attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),n("span",{attrs:{class:"token boolean"}},[a._v("true")]),n("span",{attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" System"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{attrs:{class:"token function"}},[a._v("println")]),n("span",{attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{attrs:{class:"token string"}},[a._v('"Hello, JVM!"')]),n("span",{attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n "),n("span",{attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),n("span",{attrs:{class:"token punctuation"}},[a._v("}")]),a._v("' "),n("span",{attrs:{class:"token operator"}},[a._v(">")]),a._v(" Foo"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("java\n$ javac Foo"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("java\n$ java Foo\n$ java "),n("span",{attrs:{class:"token operator"}},[a._v("-")]),a._v("cp "),n("span",{attrs:{class:"token operator"}},[a._v("/")]),a._v("path"),n("span",{attrs:{class:"token operator"}},[a._v("/")]),a._v("to"),n("span",{attrs:{class:"token operator"}},[a._v("/")]),a._v("asmtools"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("jar org"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("openjdk"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("asmtools"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("jdis"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Main Foo"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),n("span",{attrs:{class:"token operator"}},[a._v(">")]),a._v(" Foo"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("jasm"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{attrs:{class:"token number"}},[a._v("1")]),a._v("\n$ awk "),n("span",{attrs:{class:"token string"}},[a._v("'NR==1,/iconst_1/{sub(/iconst_1/, \"iconst_2\")} 1'")]),a._v(" Foo"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("jasm"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{attrs:{class:"token number"}},[a._v("1")]),a._v(" "),n("span",{attrs:{class:"token operator"}},[a._v(">")]),a._v(" Foo"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("jasm\n$ java "),n("span",{attrs:{class:"token operator"}},[a._v("-")]),a._v("cp "),n("span",{attrs:{class:"token operator"}},[a._v("/")]),a._v("path"),n("span",{attrs:{class:"token operator"}},[a._v("/")]),a._v("to"),n("span",{attrs:{class:"token operator"}},[a._v("/")]),a._v("asmtools"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("jar org"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("openjdk"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("asmtools"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("jasm"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Main Foo"),n("span",{attrs:{class:"token punctuation"}},[a._v(".")]),a._v("jasm\n$ java Foo\n\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br")])]),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),n("p",[a._v("jvm会把"),n("code",[a._v("boolean")]),a._v("型当做"),n("code",[a._v("int")]),a._v("来处理")])]),a._v(" "),n("h2",{attrs:{id:"java运行环境"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java运行环境","aria-hidden":"true"}},[a._v("#")]),a._v(" java运行环境")]),a._v(" "),n("p",[a._v("  RE是java运行环境，其包含Java程序的必须组件(Java虚拟机以及Java核心类库),JDK是java开发工具包，其也包含了JRE，同时还提供一系列开发、诊断工具。\nJRE和JDK的JRE环境是一定差异地，有时间去研究。")]),a._v(" "),n("h2",{attrs:{id:"jvm的必要性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jvm的必要性","aria-hidden":"true"}},[a._v("#")]),a._v(" JVM的必要性")]),a._v(" "),n("ul",[n("li",[a._v("java语言的复杂性")])]),a._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),n("p",[a._v("java作为一门高级程序语言，它的语法复杂，抽象程度也很高。因此在硬件上运行Java代码并不现实，所以运行Java程序之前，需要进行转换。")])]),a._v(" "),n("ul",[n("li",[a._v("java的跨平台特性")])]),a._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),n("p",[a._v("设计一个面向Java语言特性的虚拟机，并通过编译器将Java程序转换层该虚拟机所能识别的指令序列(Java字节码),其中操作码被固定成一个字节。\n对于java代码而言，屏蔽机器的差异性，可以跨平台使用。")])]),a._v(" "),n("ul",[n("li",[a._v("提供托管环境")])]),a._v(" "),n("div",{staticClass:"tip custom-block"},[n("p",{staticClass:"custom-block-title"},[a._v("TIP")]),a._v(" "),n("p",[a._v("提供自动内存管理、垃圾回收机制，数组越界，动态类型、安全权限等等的动态监测，使java程序员专注于业务逻辑功能的实现。")])]),a._v(" "),n("h2",{attrs:{id:"运行过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运行过程","aria-hidden":"true"}},[a._v("#")]),a._v(" 运行过程")]),a._v(" "),n("h3",{attrs:{id:"虚拟机角度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机角度","aria-hidden":"true"}},[a._v("#")]),a._v(" 虚拟机角度")]),a._v(" "),n("p",[a._v("  执行过程：编译class文件->加载到虚拟机的方法区->虚拟机执行方法区代码，下面是具体加载流程图：\n"),n("img",{attrs:{src:t(171),alt:"jvm运行原理-1"}}),a._v("\n   其中，栈可以细分为java方法栈和本地方法栈。运行过程中，java虚拟机会在当前线程的java方法栈生成栈帧，用于存储局部变量和字节码的操作数，栈帧大小提前计算，\n在内存空间上可以不连续。"),n("br"),a._v("\n  退出当前方法执行时，正常返回或者异常返回，java虚拟机都会弹出当前线程的当前栈帧，并丢弃。")]),a._v(" "),n("h3",{attrs:{id:"硬件角度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#硬件角度","aria-hidden":"true"}},[a._v("#")]),a._v(" 硬件角度")]),a._v(" "),n("p",[a._v("  从硬件角度上看，java字节码无法直接执行，java虚拟机把字节码翻译成机器码。翻译过程分为两种："),n("br"),a._v("\n  解释执行：即逐条将字节码翻译成机器码并执行；"),n("br"),a._v("\n  及时编译：("),n("code",[a._v("Just-In-Time compilation")]),a._v(", "),n("code",[a._v("JIT")]),a._v("), 将一个方法中包含的所有字节码编译成机器码后再执行。具体见下图：\n"),n("img",{attrs:{src:t(172),alt:"jvm运行原理-2"}}),a._v("\n  其中，解释执行无需等待编译，及时编译在于实际运行速度较快。一般情况下，及时编译比较耗时，需要提前编译完毕保存到内存中。"),n("code",[a._v("HotSpot")]),a._v("默认采用混合模式，综合了解释执行和即时编译两者的优点。\n它会首先解释字节码。然后将其中反复执行的热点代码，以方法为单位即时编译。")]),a._v(" "),n("h2",{attrs:{id:"效率提升"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#效率提升","aria-hidden":"true"}},[a._v("#")]),a._v(" 效率提升")]),a._v(" "),n("p",[a._v("  即时编译建立在程序符合二八定律的假设上。 二八定律：20%的代码占用了程序执行过程中80%的资源。对于热点代码，将其编译成机器码，此时即时编译拥有程序运行时信息，\n可以根据此进行相应优化。"),n("br"),a._v("\n  HotSpot内置了多个即时编译器："),n("code",[a._v("C1")]),a._v("、"),n("code",[a._v("C2")]),a._v("和"),n("code",[a._v("Graal")]),a._v("。具体如下："),n("br"),a._v("\n  C1：又称"),n("code",[a._v("Client")]),a._v("编译器，面向的是对启动性能有要求的客户端GUI程序，采用的优化手段相对简单，因此编译时间较短。"),n("br"),a._v("\n  C2："),n("code",[a._v("Server")]),a._v("编译器，面向的是对峰值性能有要求的服务端程序，采用的优化手段相对复杂，因此编译时间较长，但同时生成代码的执行效率较高。"),n("br"),a._v("\n  从Java 7开始，"),n("code",[a._v("HotSpot")]),a._v("默认采用分层编译的方式：热点方法首先被C1编译，而后热点方法中的热点会进一步被"),n("code",[a._v("C2")]),a._v("编译。\n为了不干扰应用的正常运行，"),n("code",[a._v("HotSpot")]),a._v("的即时编译是放在额外的编译线程中进行。"),n("code",[a._v("HotSpot")]),a._v("会根据CPU的数量设置编译线程的数目，并且按1:2的比例配置给"),n("code",[a._v("C1")]),a._v("及"),n("code",[a._v("C2")]),a._v("编译器。\n  JVM会统计每个方法被调用了多少次，超过多少次，那就是热点方法。(还有个循环回边计数器，用来编译热循环的。)默认的分层编译应该是达到两千调C1，达到一万五调C2。")])])}],v=t(0),o=Object(v.a)({},function(){this.$createElement;this._self._c;return this._m(0)},n,!1,null,null,null);o.options.__file="java运行原理.md";s.default=o.exports}}]);